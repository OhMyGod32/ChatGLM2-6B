{"id": 0, "inputs_pretokenized": "当采用分块查找时，数据的组织方式为____\nA. 数据分成若干块， 每块内数据有序\nB. 数据分成若干块， 每块内数据不必有序， 但块间必须有序， 每块内最大（ 或最小） 的数据组成索引块\nC. 数据分成若干块， 每块内数据有序， 但块间必须有序， 每块内最大（ 或最小） 的数据组成索引块\nD. 数据分成若干块， 每块（ 除最后一块外） 中数据个数需相同", "choices_pretokenized": [" A", " B", " C", " D"], "label": 1, "targets_pretokenized": ["B"]}
{"id": 1, "inputs_pretokenized": "实现一个银行系统，包括存钱、取钱、转账等多项业务，最恰当的资源组合方式是____\nA. 继承\nB. 重载\nC. 组合\nD. 实例化", "choices_pretokenized": [" A", " B", " C", " D"], "label": 2, "targets_pretokenized": ["C"]}
{"id": 2, "inputs_pretokenized": "#include<iostream.h>\nclass date\n{\nprivate:\nint day,month,year;\npublic:\ndate(){}\ndate(int x,int y,int z){day=x;month=y,year=z;}\nvoid set(){day=1;month=10;year=2002;}\nvoid display(){cout<<day<<\"/\"<<month<<\"/\"<<year<<\"\";}\n};\nvoid main()\n{\ndate day1;\ndate day2(10,10,2002);\nday1.set();\nday1.display();\nday2.display();\n}\n上面C++程序运行的结果是____。\nA. 10/10/2002 1/10/2002\nB. 1/10/2002 10/10/2002\nC. 10/10/2002 10/10/2002\nD. 1/10/2002 1/10/2002", "choices_pretokenized": [" A", " B", " C", " D"], "label": 1, "targets_pretokenized": ["B"]}
{"id": 3, "inputs_pretokenized": "假定A是一个类的名字，下面四个语句总共会引发类A构造函数的调用多少次____\n①A *p=newA;\n②A p2[10];\n③A p3;\n④A *p4[10];\nA. 11\nB. 12\nC. 21\nD. 22", "choices_pretokenized": [" A", " B", " C", " D"], "label": 1, "targets_pretokenized": ["B"]}
{"id": 4, "inputs_pretokenized": "有以下程序代码\n#include<iostream>\nusing namespace std;\nclass integer{\npublic:\ninteger(int value=0):value(value){}\ninteger operator+(integer itg){\nreturn value+=itg.value;\n}\nfriend ostream&operator<<(ostream&os,integer&it){\nreturn os<<it.value;\n}\nprivate:\nint value;\n};\nint main()\n{\ninteger i;\ninteger ii;\nii=2+i;\ncout<<\"i=\"<<i<<\",\";\ncout<<\"ii=\"<<ii<<endl;\nreturn 0;\n}\n编译情况或运行时输出是____\nA. i=0 ,ii=2\nB. i=2 ,ii=2\nC. i=0 ,ii=0\nD. 编译错误", "choices_pretokenized": [" A", " B", " C", " D"], "label": 3, "targets_pretokenized": ["D"]}
{"id": 5, "inputs_pretokenized": "在以下各种查找方法中，平均查找时间与结点个数无关的查找方法是____\nA. 顺序查找\nB. 折半查找\nC. 哈希查找\nD. 分块查找", "choices_pretokenized": [" A", " B", " C", " D"], "label": 2, "targets_pretokenized": ["C"]}
{"id": 6, "inputs_pretokenized": "读下面C++程序：\n#include<iostream.h>\nclass vehicle{\nprotected:\nint wheels;\npublic:\nvehicle(int in_wheels=4){wheels=in_wheels;}\nint get_wheels(){return wheels;}\n};\nvoid main()\n{\nvehicle unicyclel;\nvehicle unicycle2(3);\ncout<<\"Theunickele1has\"<<unicyclel.get_wheels()<<\"wheel.\\n\";\ncout<<\"Theunickele2has\"<<unicycle2.get_wheels()<<\"wheel.\\n\";\n}\n编译后输出结果为____。\nA. The unicycle1 has 0 wheel.\nThe unicycle2 has 3 wheel.\nB. The unicycle1 has 4 wheel.\nThe unicycle2 has 4 wheel.\nC. The unicycle1 has 4 wheel.\nThe unicycle2 has 3 wheel.\nD. The unicycle1 has 0 wheel.\nThe unicycle2 has 4 wheel.", "choices_pretokenized": [" A", " B", " C", " D"], "label": 2, "targets_pretokenized": ["C"]}
{"id": 7, "inputs_pretokenized": "以下说法正确的是____\nA. 在const成员函数中不可以使用this指针；\nB. 在static成员函数中不可以使用this 指针；\nC. 抽象类的成员函数都是纯虚函数；\nD. 抽象类的派生类必须实现抽象类中的纯虚函数。", "choices_pretokenized": [" A", " B", " C", " D"], "label": 1, "targets_pretokenized": ["B"]}
{"id": 8, "inputs_pretokenized": "一个n个顶点的连通无向图，其边的个数至少为____\nA. n-1\nB. n\nC. n+1\nD. nlogn", "choices_pretokenized": [" A", " B", " C", " D"], "label": 0, "targets_pretokenized": ["A"]}
{"id": 9, "inputs_pretokenized": "在C++程序中出现____情况时，将引发一个异常。\nA. 在 main 函数的结尾少了一个大括号\nB. for 循环语法错误\nC. 被零除或数组溢出\nD. 数组没有被赋满值", "choices_pretokenized": [" A", " B", " C", " D"], "label": 2, "targets_pretokenized": ["C"]}
{"id": 10, "inputs_pretokenized": "线性表若采用链式存储结构时，要求内存中可用存储单元的地址____。\nA. 必须是连续的\nB. 部分地址必须是连续的\nC. 一定是不连续的\nD. 连续不连续都可以", "choices_pretokenized": [" A", " B", " C", " D"], "label": 3, "targets_pretokenized": ["D"]}
{"id": 11, "inputs_pretokenized": "在类中说明的友元函数时____\nA. 必须声明在私有成员部分\nB. 必须声明在共有成员部分\nC. 必须声明在类开始处\nD. 可以声明在类中任何地方", "choices_pretokenized": [" A", " B", " C", " D"], "label": 3, "targets_pretokenized": ["D"]}
{"id": 12, "inputs_pretokenized": "对有14个元素的有序表A[1..14]作二分查找，查找元素A[6]时的被比较元素依次为____\nA. A[l], A[2], A[3], A[4]\nB. A[l], A[14], A[7], A[4]\nC. A[7], A[5], A[3], A[6]\nD. A[7], A[3], A[5], A[6]", "choices_pretokenized": [" A", " B", " C", " D"], "label": 3, "targets_pretokenized": ["D"]}
{"id": 13, "inputs_pretokenized": "下列概念____体现了面向对象的多态性。\nA. 虚基类\nB. 虚函数\nC. 对象容器\nD. 封装", "choices_pretokenized": [" A", " B", " C", " D"], "label": 1, "targets_pretokenized": ["B"]}
{"id": 14, "inputs_pretokenized": "若有定义char s[]={'1','2','3','0','0','4','5'};则cout<<s的结果为____\nA. 1230045\nB. 12300\nC. 1230\nD. 123", "choices_pretokenized": [" A", " B", " C", " D"], "label": 2, "targets_pretokenized": ["C"]}
{"id": 15, "inputs_pretokenized": "在C++中，数据封装要解决的问题是____。\nA. 数据规范化排列\nB. 数据高速转换\nC. 避免数据丢失\nD. 保证数据完整性", "choices_pretokenized": [" A", " B", " C", " D"], "label": 3, "targets_pretokenized": ["D"]}
{"id": 16, "inputs_pretokenized": "在顺序表（长度为127）中插入一个元素平均要移动____个元素。\nA. 8\nB. 63.5\nC. 63\nD. 7", "choices_pretokenized": [" A", " B", " C", " D"], "label": 1, "targets_pretokenized": ["B"]}
{"id": 17, "inputs_pretokenized": "关于左值引用，下列用法或叙述不正确的是____\nA. 引用可以先定义，再赋值；\nB. 引用可以作为函数参数；\nC. 函数可以返回引用；\nD. 引用是另一个有名字变量的别名。", "choices_pretokenized": [" A", " B", " C", " D"], "label": 0, "targets_pretokenized": ["A"]}
{"id": 18, "inputs_pretokenized": "现今的软件或是操作系统往往都有32位和64位的不同的版本，主要的区别就是32位的应用程序中，使用32个二进制位（即4字节）来表示内存地址，64位软件则是用64个二进制位表示内存地址。于是，当我们在将一个程序编译为64位的程序时，有下列语句\ncout<<sizeof(int)<<\"\"<<sizeof(int*)<<\"\";\ncout<<sizeof(double)<<\"\"<<sizeof(double*)<<endl;\n其输出会是____;\nA. 4 4 8 8\nB. 4 4 8 4\nC. 4 8 8 8\nD. 4 8 4 8", "choices_pretokenized": [" A", " B", " C", " D"], "label": 2, "targets_pretokenized": ["C"]}
{"id": 19, "inputs_pretokenized": "下述哪一条是顺序存储结构的优点？____\nA. 存储密度大\nB. 插入运算方便\nC. 删除运算方便\nD. 可方便地用于各种逻辑结构的存储表示", "choices_pretokenized": [" A", " B", " C", " D"], "label": 0, "targets_pretokenized": ["A"]}
{"id": 20, "inputs_pretokenized": "将一棵有100个结点的完全二叉树从根这一层开始，每一层上从左到右依次对结点进行编号，根结点的编号为1，则编号为49的结点的左孩子编号为____。\nA. 98\nB. 99\nC. 50\nD. 48", "choices_pretokenized": [" A", " B", " C", " D"], "label": 0, "targets_pretokenized": ["A"]}
{"id": 21, "inputs_pretokenized": "下面哪种数据结构最适合用于创建一个优先级队列？____\nA. 栈\nB. 双向链表\nC. 单向链表\nD. 堆", "choices_pretokenized": [" A", " B", " C", " D"], "label": 3, "targets_pretokenized": ["D"]}
{"id": 22, "inputs_pretokenized": "关于多态性，下列说法错误的是____\nA. C++语言的多态性分为编译时的多态性和运行时的多态性；\nB. 运行时的多态性可通过虚函数和函数重载实现；\nC. 编译时的多态性可通过模板实现；\nD. 实现运行时多态性的机制称为动态多态性。", "choices_pretokenized": [" A", " B", " C", " D"], "label": 1, "targets_pretokenized": ["B"]}
{"id": 23, "inputs_pretokenized": "关于构造函数，下列说法错误的是____\nA. 构造函数必须指定类型说明；\nB. 构造函数的函数名与类名相同；\nC. 构造函数可以设置缺省参数；\nD. 构造函数可以重载。", "choices_pretokenized": [" A", " B", " C", " D"], "label": 0, "targets_pretokenized": ["A"]}
{"id": 24, "inputs_pretokenized": "对于栈操作数据的原则是____。\nA. 先进先出\nB. 后进先出\nC. 后进后出\nD. 不分顺序", "choices_pretokenized": [" A", " B", " C", " D"], "label": 1, "targets_pretokenized": ["B"]}
{"id": 25, "inputs_pretokenized": "设栈S和队Q的初始状态均为空，元素abcdef依次通过栈S，一个元素出栈后即进队Q，若6个元素出栈的序列是cefdba，则栈S的容量至少应该是____\nA. 6\nB. 4\nC. 3\nD. 2", "choices_pretokenized": [" A", " B", " C", " D"], "label": 1, "targets_pretokenized": ["B"]}
{"id": 26, "inputs_pretokenized": "下面关于模版说法正确的是____。\nA. 类模版提供了一种对类中类型进行参数化的方法; 在实例化模版类时，实际的数据类型会代替与类成员或方法相关联的类型参数\nB. 类模版中必须包含类成员与类方法\nC. 不可以用自定义的数据类型实例化一个模版类\nD. 类模版中类方法的参数必须用占位符替代，而不能使用实际数据类型", "choices_pretokenized": [" A", " B", " C", " D"], "label": 0, "targets_pretokenized": ["A"]}
{"id": 27, "inputs_pretokenized": "现有一棵无重复关键字的AVL树，对其进行中序遍历可得到一个降序序列。下列关于该AVL树的叙述中，正确的是：____\nA. 根结点的度一定为 2\nB. 树中最小元素一定是叶结点\nC. 最后插入的元素一定是叶结点\nD. 树中最大元素一定是无左子树", "choices_pretokenized": [" A", " B", " C", " D"], "label": 3, "targets_pretokenized": ["D"]}
{"id": 28, "inputs_pretokenized": "计算算法的时间复杂度是属于一种____的方法。\nA. 事前统计\nB. 事前分析估算\nC. 事后统计\nD. 事后分析估算", "choices_pretokenized": [" A", " B", " C", " D"], "label": 1, "targets_pretokenized": ["B"]}
{"id": 29, "inputs_pretokenized": "假定AB为一个类，r2是AB类的对象，执行“AB r1=3;”时将自动调用该类的____\nA. 带一个整型参数的构造函数\nB. 无参构造函数\nC. 赋值运算符重载函数\nD. 拷贝构造函数", "choices_pretokenized": [" A", " B", " C", " D"], "label": 0, "targets_pretokenized": ["A"]}
{"id": 30, "inputs_pretokenized": "下列排序算法中，元素的移动次数与关键字的初始排列次序无关的是____\nA. 直接插入排序\nB. 冒泡排序\nC. 基数排序\nD. 快速排序", "choices_pretokenized": [" A", " B", " C", " D"], "label": 2, "targets_pretokenized": ["C"]}
{"id": 31, "inputs_pretokenized": "线性链表不具有的特点是____。\nA. 随机访问\nB. 不必事先估计所需存储空间大小\nC. 插入与删除时不必移动元素\nD. 所需空间与线性表长度成正比", "choices_pretokenized": [" A", " B", " C", " D"], "label": 0, "targets_pretokenized": ["A"]}
{"id": 32, "inputs_pretokenized": "设有一个递归算法如下：\nint fact(int n){\nif(n<=0)return 1;\nelse return n*fact(n-1);\n}\n下面正确的叙述是____\nA. 计算fact(n)需要执行n次递归\nB. fact(7)=5040\nC. 此递归算法最多只能计算到fact(8)\nD. 以上结论都不对", "choices_pretokenized": [" A", " B", " C", " D"], "label": 1, "targets_pretokenized": ["B"]}
{"id": 33, "inputs_pretokenized": "在C++中，一个函数为void f(int=1,char='a'),另一个函数为void f(int),则它们____。\nA. 不能在同一程序中定义\nB. 可以在同一程序中定义并可重载\nC. 可以在同一程序中定义，但不可重载\nD. 以上说法都不正确", "choices_pretokenized": [" A", " B", " C", " D"], "label": 1, "targets_pretokenized": ["B"]}
{"id": 34, "inputs_pretokenized": "已知一个有向图的邻接矩阵表示，要删除所有从第i个结点发出的边，应____。\nA. 将邻接矩阵的第i行删除\nB. 将邻接矩阵的第i行元素全部置为0\nC. 将邻接矩阵的第i列删除\nD. 将邻接矩阵的第i列元素全部置为0", "choices_pretokenized": [" A", " B", " C", " D"], "label": 1, "targets_pretokenized": ["B"]}
{"id": 35, "inputs_pretokenized": "—组关键字序列A(12,14,3,16,8,7,10,17,5,11,9,6,13,15,4),为排成递增序利用堆排序的方法建立的初始的堆为____\nA. （ 3， 4， 5, 8， 9， 7, 6, 17， 16， 14， 11， 12， 13， 15， 10 )\nB. ( 3， 5, 4, 8, 9， 7, 6， 17， 16， 14, 11， 12, 13， 15， 10 )\nC. ( 17, 16, 15, 14, 11, 13, 10, 12, 5, 8, 9, 6, 7， 3， 4 )\nD. ( 17, 16, 14, 15, 11, 13, 10, 12, 5, 8, 9, 6, 7, 3, 4 )", "choices_pretokenized": [" A", " B", " C", " D"], "label": 3, "targets_pretokenized": ["D"]}
{"id": 36, "inputs_pretokenized": "若一个线性表中最常用的操作是取第1个元素和我第1个元素的前趋元素，则采用____存储方式最节省时间。\nA. 顺序表\nB. 单链表\nC. 双链表\nD. 单循环链表", "choices_pretokenized": [" A", " B", " C", " D"], "label": 0, "targets_pretokenized": ["A"]}
